/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "keys_de.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word {
    continue-list = <DE_UNDERSCORE BACKSPACE DELETE DE_MINUS N0 N1 N2 N3 N4 N5 N6 N7 N8 N9>;
};

&sk {
    quick-release;
};

/ {
    // combos {
    // };

    combos {
        compatible = "zmk,combos";

        enter_combo {
            bindings = <&kp RET>;
            key-positions = <27 28>;
            layers = <0>;
        };

        bspc_combo {
            bindings = <&kp BSPC>;
            key-positions = <8 7>;
            layers = <0>;
        };
    };

    behaviors {
        td_bspc: td_bspc {
            compatible = "zmk,behavior-tap-dance";
            label = "delete char|word|row";
            #binding-cells = <0>;
            bindings = <&kp BSPC>, <&kp LC(BSPC)>, <&kp LC(LS(BSPC))>;
        };
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "hold-tab with tap-preferred";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        td_scw: td_shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "shift on tap, caps_word on double-tap";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>;

            tapping-term-ms = <400>;
        };
        dot_morph_cancel: dot_morph_cancel {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH_CANCEL";
            bindings = <&kp DOT>, <&kp DOT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPC_MORPH";
            bindings = <&kp SPACE>, <&dot_space_shift>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        ht_spc_morph: ht_spc_morph {
            compatible = "zmk,behavior-hold-tap";
            label = "tap executes spc_morph";
            bindings = <&kp>, <&spc_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        sqt_morph: sqt_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_MORPH";
            bindings = <&kp DE_SQT>, <&kp DE_DQT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
        ht_sqt_morph: ht_sqt_morph {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_SQT_MORPH";
            bindings = <&kp>, <&sqt_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings = <&kp DOT>, <&kp DE_GT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings = <&kp DE_COMMA>, <&kp DE_LT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
        semi_morph: semi_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SEMI_MORPH";
            bindings = <&kp DE_SEMI>, <&kp DE_COLON>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };
    };

    macros {
        dot_space_shift: dot_space_shift {
            compatible = "zmk,behavior-macro";
            label = "DOT_SPACE_SHIFT";
            #binding-cells = <0>;
            bindings = <&dot_morph_cancel &kp SPACE &sk LEFT_SHIFT>;
            wait-ms = <5>;
            tap-ms = <5>;
        };
        sel_line: sel_line {
            compatible = "zmk,behavior-macro";
            label = "select the entire line";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            wait-ms = <5>;
            tap-ms = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp DE_Q              &kp DE_W  &kp DE_F        &kp DE_P  &kp DE_B  &kp DE_J                    &kp DE_L  &ht DE_U_UMLAUT DE_U  &kp DE_Y    &ht_sqt_morph DE_GRAVE 0
&ht DE_A_UMLAUT DE_A  &kp DE_R  &ht DE_SZ DE_S  &kp DE_T  &kp DE_G  &kp DE_M                    &kp DE_N  &kp DE_E              &kp DE_I    &ht DE_O_UMLAUT DE_O
&kp DE_Z              &kp DE_X  &kp DE_C        &kp DE_D  &kp DE_V  &kp DE_K                    &kp DE_H  &comma_morph          &dot_morph  &semi_morph
                                                &mo 1     &td_scw   &ht LS(LC(LEFT_ALT)) SPACE  &mo 2
            >;
        };

        ext_layer {
            bindings = <
&kp ESC       &kp LC(DE_W)  &kp LC(DE_F)  &kp BSPC   &kp INS       &kp HOME  &kp PG_DN  &kp PG_UP  &kp END      &kp CAPS
&sk LALT      &sk LGUI      &sk LSHFT     &sk LCTRL  &sk RALT      &kp LEFT  &kp DOWN   &kp UP     &kp RIGHT    &kp DEL
&kp LC(DE_Z)  &kp LC(DE_X)  &kp LC(DE_C)  &kp TAB    &kp LC(DE_V)  &kp RET   &kp BSPC   &sel_line  &key_repeat  &kp PSCRN
                                          &trans     &trans        &mo 4     &trans
            >;
        };

        sym_layer {
            bindings = <
&kp DE_EXCL             &kp DE_AT            &kp DE_HASH  &ht DE_EURO DE_DLLR  &kp DE_PRCNT       &ht DE_TILDE DE_EQUAL  &kp N7  &kp N8  &kp N9  &kp DE_PLUS
&kp DE_QMARK            &ht DE_PIPE DE_BSLH  &kp DE_LBRC  &kp DE_LPAR          &kp DE_LBKT        &kp DE_STAR            &kp N4  &kp N5  &kp N6  &kp DE_MINUS
&ht DE_DEGREE DE_CARET  &ht DE_SECT DE_AMPS  &kp DE_RBRC  &kp DE_RPAR          &kp DE_RBKT        &kp N0                 &kp N1  &kp N2  &kp N3  &kp DE_FSLH
                                                          &trans               &kp DE_UNDERSCORE  &none                  &trans
            >;
        };

        fun_layer {
            bindings = <
&none     &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP  &kp C_BRI_UP  &kp F12  &kp F7  &kp F8  &kp F9  &kp LC(DE_PLUS)
&sk LALT  &sk LGUI      &sk LSHFT         &sk LCTRL     &kp C_BRI_DN  &kp F11  &kp F4  &kp F5  &kp F6  &kp LC(DE_MINUS)
&none     &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &none         &kp F10  &kp F1  &kp F2  &kp F3  &kp LC(N0)
                                          &trans        &trans        &none    &trans
            >;
        };

        hw_layer {
            bindings = <
&bootloader  &none  &none         &none         &none  &none   &none         &none         &none         &bootloader
&none        &none  &out OUT_USB  &out OUT_TOG  &none  &none   &bt BT_NXT    &out OUT_BLE  &bt BT_CLR    &none
&none        &none  &none         &none         &none  &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &none
                                  &trans        &none  &trans  &none
            >;
        };

        game_layer {
            bindings = <
&kp TAB    &kp DE_Q  &kp DE_W  &kp DE_E    &kp DE_R   &kp DE_T   &kp DE_Y  &kp DE_U  &kp DE_I  &kp DE_O
&kp LSHFT  &kp DE_A  &kp DE_S  &kp DE_D    &kp DE_F   &kp DE_V   &kp DE_H  &kp DE_J  &kp DE_K  &kp DE_L
&kp LCTRL  &kp DE_Z  &kp DE_X  &kp DE_C    &kp DE_G   &kp DE_B   &kp DE_N  &kp DE_M  &kp DE_P  &kp DE_DOT
                               &lt 6 LALT  &kp SPACE  &kp SPACE  &none
            >;
        };

        game2_layer {
            bindings = <
&kp N1  &kp N2    &kp N3   &kp N4   &kp N5  &trans  &trans    &kp UP    &trans     &trans
&kp N6  &kp N7    &kp N8   &kp N9   &kp N0  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans
&trans  &kp BSPC  &kp DEL  &kp ESC  &kp F5  &trans  &trans    &trans    &trans     &trans
                           &trans   &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun_cond {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
