/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define DEF     0
#define EXT     1
#define SYM1    2
#define SYM2    3
#define FUNC    4

/ {
    // combos {
    // };

    combos {
        compatible = "zmk,combos";

        caps_world_combo {
            bindings = <&caps_word>;
            key-positions = <31 32>;
            layers = <0>;
        };

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
            layers = <0>;
        };

        esc_combo {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0>;
        };

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <18 17>;
            layers = <0>;
        };

        bspc_combo {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 7>;
            layers = <0>;
        };

        tog_gaming_combo {
            bindings = <&tog 5>;
            key-positions = <32 33>;
            layers = <5 0>;
        };

        minus_combo {
            bindings = <&kp MINUS>;
            key-positions = <6 3>;
            layers = <0>;
        };

        under_combo {
            bindings = <&kp UNDER>;
            key-positions = <23 26>;
            layers = <0>;
        };
    };

    behaviors {
        td_bspc: td_bspc {
            compatible = "zmk,behavior-tap-dance";
            label = "td_bspc";
            #binding-cells = <0>;
            bindings =
                <&kp BSPC>,
                <&kp LC(BSPC)>;
        };
        hold_tab: hold-tab {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_TAB";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp F            &kp P           &kp B      &kp J        &kp L      &kp U    &kp Y  &mt GRAVE SQT
&kp A  &kp R  &kp S            &kp T           &kp G      &kp M        &kp N      &kp E    &kp I          &kp O
&kp Z  &kp X  &kp C            &kp D           &kp V      &kp K        &kp H  &kp COMMA  &kp DOT      &kp SLASH
                     &lt 1 BACKSPACE  &sk LEFT_SHIFT  &kp SPACE  &lt 2 ENTER
            >;
        };

        extended_layer {
            bindings = <
  &kp ESC  &kp LA(LEFT)  &kp LC(F)  &kp LA(RIGHT)    &kp INS  &kp HOME  &kp PAGE_DOWN  &kp PG_UP      &kp END         &kp CAPS
 &sk LALT      &sk LGUI  &sk LSHFT      &sk LCTRL   &sk RALT  &kp LEFT       &kp DOWN     &kp UP    &kp RIGHT          &kp DEL
&kp LC(Z)     &kp LC(X)  &kp LC(C)       &kp LGUI  &kp LC(V)   &kp RET  &kp BACKSPACE    &kp TAB  &key_repeat  &kp PRINTSCREEN
                                           &trans      &none     &mo 3          &mo 4
            >;
        };

        symbols_layer1 {
            bindings = <
 &kp EXCL     &kp AT  &kp HASH  &mt RA(NUMBER_5) DOLLAR  &mt RA(LS(S)) PRCNT     &kp EQUAL  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9        &kp PLUS
 &kp SEMI  &kp COLON  &kp LBRC                 &kp LPAR             &kp LBKT  &kp ASTERISK  &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6       &kp MINUS
&kp CARET   &kp AMPS  &kp RBRC                 &kp RPAR             &kp RBKT  &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp UNDERSCORE
                                                  &mo 4   &mt PIPE BACKSLASH         &none        &trans
            >;
        };

        symbols_layer2 {
            bindings = <
&none      &none             &none   &none  &none   &none  &none  &none  &out OUT_USB  &bt BT_SEL 0
&none      &none             &none   &none  &none   &none  &none  &none  &out OUT_BLE  &bt BT_SEL 1
&none  &kp TILDE  &kp RA(RS(SEMI))   &none  &none   &none  &none  &none    &bt BT_CLR  &bt BT_SEL 2
                                    &trans  &none  &trans  &none
            >;
        };

        function_layer {
            bindings = <
   &none  &kp C_VOL_DN        &kp C_MUTE  &kp C_VOL_UP  &kp C_BRI_UP  &kp F12  &kp F7  &kp F8  &kp F9      &kp LC(PLUS)
&sk LALT      &sk LGUI         &sk LSHFT     &sk LCTRL  &kp C_BRI_DN  &kp F11  &kp F4  &kp F5  &kp F6     &kp LC(MINUS)
   &none    &kp C_PREV  &kp C_PLAY_PAUSE    &kp C_NEXT         &none  &kp F10  &kp F1  &kp F2  &kp F3  &kp LC(NUMBER_0)
                                                &trans         &none    &none  &trans
            >;
        };

        gaming_layer {
            bindings = <
  &kp TAB  &kp Q  &kp W       &kp E      &kp R      &kp T  &kp Y  &kp U  &kp I    &kp O
&kp LSHFT  &kp A  &kp S       &kp D      &kp F      &kp V  &kp H  &kp J  &kp K    &kp L
&kp LCTRL  &kp Z  &kp X       &kp C      &kp G      &kp B  &kp N  &kp M  &kp P  &kp DOT
                         &lt 6 LALT  &kp SPACE  &kp SPACE  &none
            >;
        };

        gaming_layer2 {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &trans  &trans  &trans  &trans  &trans
&kp NUMBER_6  &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans  &trans  &trans  &trans  &trans
      &trans        &trans        &trans        &trans        &trans  &trans  &trans  &trans  &trans  &trans
                                                &trans        &trans  &trans  &trans
            >;
        };
    };
};
