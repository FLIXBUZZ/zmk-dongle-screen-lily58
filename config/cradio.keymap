/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include "keys_de.h"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word {
    continue-list = <DE_UNDERSCORE BACKSPACE DELETE DE_MINUS N0 N1 N2 N3 N4 N5 N6 N7 N8 N9>;
};

&sk {
    quick-release;
    release-after-ms = <900>;
};

&sl {
    ignore-modifiers;
};

/ {
    combos {
        compatible = "zmk,combos";

        esc {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            require-prior-idle-ms = <100>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        enter {
            bindings = <&kp ENTER>;
            key-positions = <2 3>;
            require-prior-idle-ms = <100>;
            timeout-ms = <20>;
            layers = <0 1 2>;
        };

        bspc {
            bindings = <&kp BSPC>;
            key-positions = <26 27>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
            layers = <0 1 2>;
        };

        del {
            bindings = <&kp DEL>;
            key-positions = <27 28>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
            layers = <0 1 2>;
        };

        tap {
            bindings = <&hml LA(LCTRL) TAB>;
            key-positions = <12 11>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
            layers = <0 1 2>;
        };

        repeat {
            bindings = <&hml_repeat LS(LCTRL) 0>;
            key-positions = <12 13>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
            layers = <0 1 2>;
        };

        lpar {
            bindings = <&hmr_lpar_lt LS(LCTRL) 0>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        rpar {
            bindings = <&hmr_rpar_gt LA(LCTRL) 0>;
            key-positions = <17 18>;
            layers = <0>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        lbkt {
            bindings = <&lbkt_lbrc>;
            key-positions = <6 7>;
            layers = <0>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        rbkt {
            bindings = <&rbkt_rbrc>;
            key-positions = <8 7>;
            layers = <0>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
        };

        at {
            bindings = <&kp DE_AT>;
            key-positions = <1 11>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        hash {
            bindings = <&kp DE_HASH>;
            key-positions = <12 2>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        dllr {
            bindings = <&kp DE_DLLR>;
            key-positions = <3 13>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        prcnt {
            bindings = <&kp DE_PRCNT>;
            key-positions = <14 4>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        bslh {
            bindings = <&kp DE_BSLH>;
            key-positions = <22 12>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        equal {
            bindings = <&kp DE_EQUAL>;
            key-positions = <23 13>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        tilde {
            bindings = <&kp DE_TILDE>;
            key-positions = <24 14>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        caret {
            bindings = <&kp DE_CARET>;
            key-positions = <15 5>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        plus {
            bindings = <&kp DE_PLUS>;
            key-positions = <6 16>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        star {
            bindings = <&kp DE_STAR>;
            key-positions = <17 7>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        amps {
            bindings = <&kp DE_AMPS>;
            key-positions = <8 18>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        sect {
            bindings = <&kp DE_SECT>;
            key-positions = <9 19>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        under {
            bindings = <&kp DE_UNDER>;
            key-positions = <25 15>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        minus {
            bindings = <&kp DE_MINUS>;
            key-positions = <16 26>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        fslh {
            bindings = <&kp DE_FSLH>;
            key-positions = <17 27>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        pipe {
            bindings = <&kp DE_PIPE>;
            key-positions = <28 18>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        deg {
            bindings = <&kp DE_DEG>;
            key-positions = <19 29>;
            layers = <0>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
        };

        ger {
            bindings = <&sl 5>;
            key-positions = <3 1>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        euro {
            bindings = <&kp DE_EURO>;
            key-positions = <21 11>;
            timeout-ms = <35>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        par {
            bindings = <&hmr_par_lgt LS(LALT) 0>;
            key-positions = <16 18>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };

        bkt {
            bindings = <&bkt_brc>;
            key-positions = <6 8>;
            timeout-ms = <20>;
            require-prior-idle-ms = <100>;
            layers = <0>;
        };
    };

    behaviors {
        td_scw: td_shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "shift on tap, caps_word on double-tap";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT>, <&caps_word>, <&kp CLCK>;

            tapping-term-ms = <400>;
        };

        sqt_dqt: sqt_dqt {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_DQT";
            bindings = <&kp DE_SQT>, <&kp DE_DQT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QEXCL";
            bindings = <&kp DE_QMARK>, <&kp DE_EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 31 30>;
        };

        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "HT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <220>;
            tapping-term-ms = <220>;
        };

        masked_home: masked_home {
            compatible = "zmk,behavior-mod-morph";
            label = "MASKED_HOME";
            bindings = <&kp HOME>, <&kp HOME>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        masked_end: masked_end {
            compatible = "zmk,behavior-mod-morph";
            label = "MASKED_END";
            bindings = <&kp END>, <&kp END>;

            #binding-cells = <0>;
            mods = <(MOD_LCTL|MOD_RCTL)>;
        };

        ht_home: ht_home {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_HOME";
            bindings = <&masked_home>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <220>;
            tapping-term-ms = <220>;
        };

        ht_end: ht_end {
            compatible = "zmk,behavior-hold-tap";
            label = "HT_END";
            bindings = <&masked_end>, <&kp>;

            #binding-cells = <2>;
            flavor = "tap-preferred";
            quick-tap-ms = <220>;
            tapping-term-ms = <220>;
        };

        mo_tog: mo_tog {
            compatible = "zmk,behavior-hold-tap";
            label = "MO_TOG";
            bindings = <&mo>, <&tog>;

            #binding-cells = <2>;
            tapping-term-ms = <100>;
        };

        hml_repeat: hml_repeat {
            compatible = "zmk,behavior-hold-tap";
            label = "HML_REPEAT";
            bindings = <&kp>, <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <175>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 32 33 31 30>;
        };

        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_LT";
            bindings = <&kp DE_LPAR>, <&kp DE_LT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_GT";
            bindings = <&kp DE_RPAR>, <&kp DE_GT>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        lbkt_lbrc: lbkt_lbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "LBKT_LBRC";
            bindings = <&kp DE_LEFT_BRACKET>, <&kp DE_LBRC>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        rbkt_rbrc: rbkt_rbrc {
            compatible = "zmk,behavior-mod-morph";
            label = "RBKT_RBRC";
            bindings = <&kp DE_RBKT>, <&kp DE_RBRC>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        hmr_lpar_lt: hmr_lpar_lt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_LPAR_LT";
            bindings = <&kp>, <&lpar_lt>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        hmr_rpar_gt: hmr_rpar_gt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_RPAR_GT";
            bindings = <&kp>, <&rpar_gt>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        mt_td_scw: mt_td_scw {
            compatible = "zmk,behavior-hold-tap";
            label = "MT_TD_SCW";
            bindings = <&kp>, <&td_scw>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        par_lgt: par_lgt {
            compatible = "zmk,behavior-mod-morph";
            label = "PAR_LGT";
            bindings = <&par_macro>, <&lgt_macro>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        bkt_brc: bkt_brc {
            compatible = "zmk,behavior-mod-morph";
            label = "BKT_BRC";
            bindings = <&bkt_macro>, <&brc_macro>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        hmr_par_lgt: hmr_par_lgt {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR_PAR_LGT";
            bindings = <&kp>, <&par_lgt>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33>;
        };

        sqt_dqt_macro: sqt_dqt_macro {
            compatible = "zmk,behavior-mod-morph";
            label = "SQT_DQT_MACRO";
            bindings = <&sqt_macro>, <&dqt_macro>;

            #binding-cells = <0>;
            mods = <(MOD_RSFT|MOD_LSFT)>;
        };

        td_sqt_dqt: td_sqt_dqt {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_SQT_DQT";
            #binding-cells = <0>;
            bindings = <&sqt_dqt>, <&sqt_dqt_macro>;

            tapping-term-ms = <270>;
        };
    };

    macros {
        par_macro: par_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DE_LPAR &kp DE_RPAR &kp LEFT>;
            label = "PAR_MACRO";
        };

        bkt_macro: bkt_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DE_LBKT &kp DE_RBKT &kp LEFT>;
            label = "BKT_MACRO";
        };

        sqt_macro: sqt_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DE_SQT &kp DE_SQT &kp LEFT>;
            label = "SQT_MACRO";
        };

        dqt_macro: dqt_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp DE_DQT &kp DE_DQT>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LEFT>;

            label = "DQT_MACRO";
        };

        brc_macro: brc_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp DE_LBRC &kp DE_RBRC &kp LEFT>;
            label = "BRC_MACRO";
        };

        lgt_macro: lgt_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings =
                <&kp DE_LT &kp DE_GT>,
                <&macro_release>,
                <&kp LSHFT>,
                <&macro_tap>,
                <&kp LEFT>;

            label = "LGT_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&kp DE_Q        &kp DE_W        &kp DE_F         &kp DE_P          &kp DE_B            &kp DE_J     &kp DE_L         &kp DE_U         &kp DE_Y        &td_sqt_dqt
&hml LGUI DE_A  &hml LALT DE_R  &hml LCTRL DE_S  &hml LSHIFT DE_T  &kp DE_G            &kp DE_M     &hmr RSHFT DE_N  &hmr LCTRL DE_E  &hmr LALT DE_I  &hmr LGUI DE_O
&kp DE_Z        &kp DE_X        &kp DE_C         &lt 6 DE_D        &kp DE_V            &kp DE_K     &kp DE_H         &kp DE_COMMA     &kp DE_DOT      &qexcl
                                                 &mo 1             &mt_td_scw LSHFT 0  &lt 3 SPACE  &mo 2
            >;

            label = "BSE";
        };

        nav_layer {
            bindings = <
&kp ESC       &kp LC(DE_W)  &kp LC(DE_F)  &kp BSPC   &kp INS      &trans           &kp PG_DN          &kp PG_UP        &trans           &trans
&sk LGUI      &sk LALT      &sk LCTRL     &sk LSHFT  &sk RALT     &ht_home 0 LEFT  &ht LC(END) DOWN   &ht LC(HOME) UP  &ht_end 0 RIGHT  &kp PAUSE_BREAK
&kp LC(DE_Z)  &kp LC(DE_X)  &kp LC(INS)   &trans     &kp LS(INS)  &kp RET          &ht LC(BSPC) BSPC  &kp TAB          &ht LC(DEL) DEL  &kp PSCRN
                                          &trans     &trans       &trans           &trans
            >;

            label = "NAV";
        };

        num_layer {
            bindings = <
&trans  &trans  &trans  &none   &trans  &kp DE_DOT    &kp DE_N7  &kp DE_N8  &kp DE_N9  &kp BSPC
&trans  &none   &trans  &trans  &trans  &kp DE_COMMA  &kp DE_N4  &kp DE_N5  &kp DE_N6  &kp RET
&trans  &trans  &trans  &trans  &trans  &kp DE_N0     &kp DE_N1  &kp DE_N2  &kp DE_N3  &trans
                        &trans  &trans  &trans        &trans
            >;

            label = "NUM";
        };

        fun_layer {
            bindings = <
&trans  &kp C_VOL_DN  &kp C_MUTE  &kp C_VOL_UP  &kp C_BRI_UP  &kp F12  &kp F7  &kp F8  &kp F9  &kp LC(DE_PLUS)
&trans  &trans        &trans      &trans        &kp C_BRI_DN  &kp F11  &kp F4  &kp F5  &kp F6  &kp LC(DE_MINUS)
&trans  &kp C_PREV    &kp C_PP    &kp C_NEXT    &trans        &kp F10  &kp F1  &kp F2  &kp F3  &kp LC(N0)
                                  &trans        &trans        &trans   &trans
            >;

            label = "FUN";
        };

        hw_layer {
            bindings = <
&bootloader  &none  &none         &none         &none  &none   &none         &none         &none         &bootloader
&none        &none  &out OUT_USB  &out OUT_TOG  &none  &none   &bt BT_NXT    &out OUT_BLE  &bt BT_CLR    &none
&none        &none  &none         &none         &none  &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &none
                                  &trans        &none  &trans  &none
            >;

            label = "HW";
        };

        ger_layer {
            bindings = <
&trans           &trans  &trans         &trans  &trans  &trans  &trans  &kp DE_U_UMLAUT  &kp DE_ACUTE  &kp DE_GRAVE
&kp DE_A_UMLAUT  &trans  &kp DE_ESZETT  &trans  &trans  &trans  &trans  &trans           &trans        &kp DE_O_UMLAUT
&trans           &trans  &trans         &trans  &trans  &trans  &trans  &trans           &trans        &trans
                                        &trans  &trans  &trans  &trans
            >;

            label = "GER";
        };

        mouse_layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans     &trans     &trans    &trans    &trans
&trans  &trans  &trans  &trans  &trans  &trans     &mkp MB4   &mkp MB3  &mkp MB5  &trans
                        &trans  &trans  &mkp LCLK  &mkp RCLK
            >;

            label = "MSE";
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun_cond {
            if-layers = <1 2>;
            then-layer = <4>;
        };
    };
};
