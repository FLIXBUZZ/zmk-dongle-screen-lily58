/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&caps_word {
    continue-list = <UNDERSCORE BACKSPACE DELETE MINUS N0 N1 N2 N3 N4 N5 N6 N7 N8 N9>;
};

&sk {
    quick-release;
};

/ {
    // combos {
    // };

    combos {
        compatible = "zmk,combos";

        tab_combo {
            bindings = <&kp TAB>;
            key-positions = <21 22>;
            layers = <0>;
        };

        esc_combo {
            bindings = <&kp ESC>;
            key-positions = <1 2>;
            layers = <0>;
        };

        enter_combo {
            bindings = <&kp ENTER>;
            key-positions = <27 28>;
            layers = <0>;
        };

        bspc_combo {
            bindings = <&kp BACKSPACE>;
            key-positions = <8 7>;
            layers = <0>;
        };

        tog_gaming_combo {
            bindings = <&tog 5>;
            key-positions = <32 33>;
            layers = <5 0>;
        };
    };

    behaviors {
        td_bspc: td_bspc {
            compatible = "zmk,behavior-tap-dance";
            label = "delete char|word|row";
            #binding-cells = <0>;
            bindings =
                <&kp BSPC>,
                <&kp LC(BSPC)>,
                <&kp LC(LS(BSPC))>;
        };
        ht: ht {
            compatible = "zmk,behavior-hold-tap";
            label = "hold-tab with tap-preferred";
            bindings =
                <&kp>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
        td_scw: td_shift_caps_word {
            compatible = "zmk,behavior-tap-dance";
            label = "shift on tap, caps_word on double-tap";
            #binding-cells = <0>;
            bindings =
                <&kp LSHIFT>,
                <&caps_word>;
        };
        dot_morph_cancel: dot_morph_cancel {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH_CANCEL";
            bindings =
                <&kp DOT>,
                <&kp DOT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        spc_morph: spc_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "SPC_MORPH";
            bindings =
                <&kp SPACE>,
                <&dot_space_shift>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        mt_spc_morph: mt_spc_morph {
            compatible = "zmk,behavior-hold-tap";
            label = "tap executes spc_morph";
            bindings =
                <&kp>,
                <&spc_morph>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    macros {
        dot_space_shift: dot_space_shift {
            compatible = "zmk,behavior-macro";
            label = "DOT_SPACE_SHIFT";
            #binding-cells = <0>;
            bindings = <&dot_morph_cancel &kp SPACE &sk LEFT_SHIFT>;
            wait-ms = <5>;
            tap-ms = <5>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q  &kp W  &kp F  &kp P            &kp B    &kp J                         &kp L        &kp U      &kp Y    &ht GRAVE SQT
&kp A  &kp R  &kp S  &kp T            &kp G    &kp M                         &kp N        &kp E      &kp I    &kp O
&kp Z  &kp X  &kp C  &kp D            &kp V    &kp K                         &kp H        &kp COMMA  &kp DOT  &kp SEMI
                     &lt 1 BACKSPACE  &td_scw  &mt_spc_morph LS(LC(LALT)) 0  &lt 2 ENTER
            >;
        };

        extended_layer {
            bindings = <
&kp ESC    &kp LC(W)  &kp LC(F)  &sk LC(LS(LA(LEFT_GUI)))  &kp INS    &kp HOME  &kp PAGE_DOWN  &kp PG_UP  &kp END      &kp CAPS
&sk LALT   &sk LGUI   &sk LSHFT  &sk LCTRL                 &sk RALT   &kp LEFT  &kp DOWN       &kp UP     &kp RIGHT    &kp DEL
&kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp TAB                   &kp LC(V)  &kp RET   &kp BACKSPACE  &none      &key_repeat  &kp PRINTSCREEN
                                 &trans                    &trans     &mo 4     &mo 2
            >;
        };

        symbols_layer {
            bindings = <
&ht EXCL QUESTION       &kp AT              &kp HASH  &ht RA(NUMBER_5) DOLLAR  &kp PERCENT  &kp EQUAL     &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp PLUS
&ht PIPE BACKSLASH      &kp UNDER           &kp LBRC  &kp LPAR                 &kp LBKT     &kp ASTRK     &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &kp MINUS
&ht RA(LS(SEMI)) CARET  &ht RA(LS(S)) AMPS  &kp RBRC  &kp RPAR                 &kp RBKT     &kp NUMBER_0  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp SLASH
                                                      &mo 1                    &trans       &none         &trans
            >;
        };

        function_layer {
            bindings = <
&none     &kp C_VOL_DN  &kp C_MUTE        &kp C_VOL_UP  &kp C_BRI_UP  &kp F12  &kp F7  &kp F8  &kp F9  &kp LC(PLUS)
&sk LALT  &sk LGUI      &sk LSHFT         &sk LCTRL     &kp C_BRI_DN  &kp F11  &kp F4  &kp F5  &kp F6  &kp LC(MINUS)
&none     &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT    &none         &kp F10  &kp F1  &kp F2  &kp F3  &kp LC(NUMBER_0)
                                          &trans        &trans        &none    &trans
            >;
        };

        hw_layer {
            bindings = <
&bootloader  &none  &none         &none         &none  &none   &none         &none         &none         &bootloader
&none        &none  &out OUT_USB  &out OUT_TOG  &none  &none   &bt BT_NXT    &out OUT_BLE  &bt BT_CLR    &none
&none        &none  &none         &none         &none  &none   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 3  &none
                                  &trans        &none  &trans  &none
            >;
        };

        gaming_layer {
            bindings = <
&kp TAB    &kp Q  &kp W  &kp E       &kp R      &kp T      &kp Y  &kp U  &kp I  &kp O
&kp LSHFT  &kp A  &kp S  &kp D       &kp F      &kp V      &kp H  &kp J  &kp K  &kp L
&kp LCTRL  &kp Z  &kp X  &kp C       &kp G      &kp B      &kp N  &kp M  &kp P  &kp DOT
                         &lt 6 LALT  &kp SPACE  &kp SPACE  &none
            >;
        };

        gaming2_layer {
            bindings = <
&kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp NUMBER_4  &kp NUMBER_5  &trans  &trans          &kp UP_ARROW    &trans           &trans
&kp NUMBER_6  &kp NUMBER_7   &kp NUMBER_8  &kp NUMBER_9  &kp NUMBER_0  &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans        &kp BACKSPACE  &kp DEL       &kp ESC       &kp F5        &trans  &trans          &trans          &trans           &trans
                                           &trans        &trans        &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        fun_cond {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
